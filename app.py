import streamlit as st
import numpy as np
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt
from streamlit_drawable_canvas import st_canvas

# URL API
API_URL = "https://chicken-cow-horse-sheep-classification.onrender.com/predict/"

# –°–ø–∏—Å–æ–∫ —á–∏—Ç–∞–µ–º—ã—Ö –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤
CLASS_NAMES = ["chicken", "cow", "horse", "sheep"]

st.title("üêîüêÑüêéüêë –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∂–∏–≤–æ—Ç–Ω—ã—Ö")

tab1, tab2 = st.tabs(["üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "‚úèÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"])

image = None

with tab1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")

with tab2:
    canvas_result = st_canvas(
        fill_color="black",
        stroke_width=10,
        stroke_color="white",
        background_color="black",
        width=256,
        height=256,
        drawing_mode="freedraw",
        key="canvas",
        update_streamlit=True
    )

    if canvas_result.image_data is not None:
        img = Image.fromarray((canvas_result.image_data).astype("uint8")).convert("RGB")
        image = img

if image:
    st.image(image, caption="–í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: —Ä–µ—Å–∞–π–∑ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –±–∞–π—Ç—ã
        img_resized = image.resize((64, 64))
        buffered = BytesIO()
        img_resized.save(buffered, format="PNG")
        img_bytes = buffered.getvalue()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
        files = {"file": ("image.png", img_bytes, "image/png")}
        response = requests.post(API_URL, files=files)

        if response.status_code == 200:
            result = response.json()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–∞
            predicted = result.get("predicted_class")
            if isinstance(predicted, int) and 0 <= predicted < len(CLASS_NAMES):
                predicted_label = CLASS_NAMES[predicted]
            else:
                predicted_label = predicted  # –µ—Å–ª–∏ API —É–∂–µ –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É

            st.subheader("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:")
            st.write(predicted_label)

            st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
            probs = result.get("probabilities", {})
            fig, ax = plt.subplots()
            ax.bar(probs.keys(), probs.values(), color="skyblue")
            ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
            ax.set_ylim([0, 1])
            st.pyplot(fig)
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:")
            st.text(response.text)
